{"version":3,"sources":["index.js"],"names":["Column","props","id","style","float","value","onClick","height","Canvas","state","columns","Array","fill","total","this","i","pow","console","log","slice","setState","calculate","handleClick","renderColumn","React","Component","ReactDOM","render","document","getElementById"],"mappings":"kPAIA,SAASA,EAAOC,GACf,OACC,yBAAKC,GAAG,SAASC,MAAO,CAACC,MAAM,SAC9B,6BAAK,gCAASH,EAAMI,QACpB,6BAAK,4BAAQC,QAAUL,EAAMK,QAASH,MAAO,CAACI,OAAO,Y,IAKlDC,E,kDAEL,WAAYP,GAAO,IAAD,8BACjB,cAAMA,IACDQ,MAAQ,CACZC,QAASC,MAAM,GAAGC,KAAK,IAExB,EAAKC,MAAQ,EALI,E,wDASjB,IAAMH,EAAUI,KAAKL,MAAMC,QAC3BI,KAAKD,MAAQ,EACb,IAAI,IAAIE,EAAI,EAAGA,EAAI,EAAGA,IAAI,CACzB,IAAIC,EAAM,EAAID,EACdD,KAAKD,OAAU,SAAC,EAAKG,GAAON,EAAQK,GACpCE,QAAQC,IAAI,MAAQH,EAAI,YAAe,SAAC,EAAKC,GAAON,EAAQK,GAAM,QAAUC,M,kCAIlED,GACX,IAAML,EAAUI,KAAKL,MAAMC,QAAQS,QAClB,GAAdT,EAAQK,GACVL,EAAQK,GAAK,EAEbL,EAAQK,GAAK,EAEdD,KAAKM,SAAS,CACbV,QAASA,IAEVI,KAAKO,c,mCAGON,GAAI,IAAD,OACf,OACC,kBAACf,EAAD,CAAQK,MAASS,KAAKL,MAAMC,QAAQK,GAClCT,QAAS,kBAAI,EAAKgB,YAAYP,Q,+BAKjC,OACA,yBAAKb,GAAK,QACV,8CACA,2CACEY,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKS,aAAa,GAClBT,KAAKO,YACN,6BACA,6BACC,2BAAG,sCAAeP,KAAKD,OACxB,6BACA,2T,GA1DkBW,IAAMC,WAkE3BC,IAASC,OACP,kBAACnB,EAAD,MACAoB,SAASC,eAAe,W","file":"static/js/main.d3dd4456.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Column(props) {\n\treturn(\n\t\t<div id=\"parent\" style={{float:'left'}}>\n\t\t\t<div><center>{props.value}</center></div>\n\t\t\t<div><button onClick= {props.onClick} style={{height:'10px'}}></button></div>\n\t\t</div>\n\t);\n}\n\nclass Canvas extends React.Component {\n\t//var total;\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcolumns: Array(8).fill(0)\n\t\t};\n\t\tthis.total = 0;\n\t}\n\t\n\tcalculate() {\n\t\tconst columns = this.state.columns\n\t\tthis.total = 0;\n\t\tfor(var i = 0; i < 8; i++){\n\t\t\tvar pow = 7 - i;\n\t\t\tthis.total += ((2 ** pow) * columns[i]);\n\t\t\tconsole.log(\"i: \" + i + \", value: \" + ((2 ** pow) * columns[i]) + \"pow: \" + pow );\n\t\t}\n\t}\n\t\n\thandleClick(i) {\n\t\tconst columns = this.state.columns.slice();\n\t\tif(columns[i] == 0){\n\t\t\tcolumns[i] = 1\n\t\t} else {\n\t\t\tcolumns[i] = 0;\n\t\t}\n\t\tthis.setState({\n\t\t\tcolumns: columns\n\t\t});\n\t\tthis.calculate();\n\t}\n\t\n\trenderColumn(i) {\n\t\treturn(\n\t\t\t<Column value = {this.state.columns[i]}\n\t\t\t\t\tonClick={()=>this.handleClick(i)}/>\n\t\t);\n\t}\n\t\n\trender() {\n\t\treturn(\n\t\t<div id = \"main\">\n\t\t<h2>Binary Buttons</h2>\n\t\t<h5>Gavyn Bryan</h5>\n\t\t\t{this.renderColumn(0)}\n\t\t\t{this.renderColumn(1)}\n\t\t\t{this.renderColumn(2)}\n\t\t\t{this.renderColumn(3)}\n\t\t\t{this.renderColumn(4)}\n\t\t\t{this.renderColumn(5)}\n\t\t\t{this.renderColumn(6)}\n\t\t\t{this.renderColumn(7)}\n\t\t\t{this.calculate()}\n\t\t\t<br/>\n\t\t\t<br/>\n\t\t\t\t<p><b>Value: </b>{this.total}</p>\n\t\t\t<br/>\n\t\t\t<p>The purpose of this application is to demonstrate how binary works by offering the user possibly the most binary form of input there is: buttons. Press on each individual button and see how the value of the number changes according to whether each column is either \"on\" or \"off\".</p>\n\t\t</div>\n\t\t);\n\t}\n}\n\n// ========================================\n\nReactDOM.render(\n  <Canvas />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}